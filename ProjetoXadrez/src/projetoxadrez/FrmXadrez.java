/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package projetoxadrez;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import jogo.Cores;
import jogo.PartidaXadrez;
import jogo.PecasXadrez;
import tabuleiro.Posicao;

/**
 *
 * @author giuli
 */
public class FrmXadrez extends javax.swing.JFrame {

    private static PartidaXadrez partida = new PartidaXadrez();
    private static JButton[][] pos;
    private static JLabel[][] capP;
    private static JLabel[][] capB;
    private static List<PecasXadrez> pecasCap = new ArrayList<PecasXadrez>();
    private static Posicao origem = null;
    private static Posicao destino = null;
    private static FrmPromocao promo = new FrmPromocao();

    /**
     * Creates new form FrmXadrez
     */
    public FrmXadrez() {
        setTitle("Xadrez");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        initComponents();
        iniciarTab();
        iniciarPecasCap();
        imprimirTabuleiro();

        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tab = new javax.swing.JPanel();
        pretas = new javax.swing.JPanel();
        brancas = new javax.swing.JPanel();
        pecasP = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pecasB = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        text = new javax.swing.JScrollPane();
        info = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(900, 660));
        setSize(new java.awt.Dimension(900, 660));
        getContentPane().setLayout(null);

        javax.swing.GroupLayout tabLayout = new javax.swing.GroupLayout(tab);
        tab.setLayout(tabLayout);
        tabLayout.setHorizontalGroup(
            tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        tabLayout.setVerticalGroup(
            tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        getContentPane().add(tab);
        tab.setBounds(0, 0, 600, 600);

        javax.swing.GroupLayout pretasLayout = new javax.swing.GroupLayout(pretas);
        pretas.setLayout(pretasLayout);
        pretasLayout.setHorizontalGroup(
            pretasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 290, Short.MAX_VALUE)
        );
        pretasLayout.setVerticalGroup(
            pretasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 220, Short.MAX_VALUE)
        );

        getContentPane().add(pretas);
        pretas.setBounds(600, 55, 290, 220);

        javax.swing.GroupLayout brancasLayout = new javax.swing.GroupLayout(brancas);
        brancas.setLayout(brancasLayout);
        brancasLayout.setHorizontalGroup(
            brancasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 290, Short.MAX_VALUE)
        );
        brancasLayout.setVerticalGroup(
            brancasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 230, Short.MAX_VALUE)
        );

        getContentPane().add(brancas);
        brancas.setBounds(600, 375, 290, 230);

        pecasP.setBackground(java.awt.Color.lightGray);
        pecasP.setToolTipText("");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Peças capturadas:");

        javax.swing.GroupLayout pecasPLayout = new javax.swing.GroupLayout(pecasP);
        pecasP.setLayout(pecasPLayout);
        pecasPLayout.setHorizontalGroup(
            pecasPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
        );
        pecasPLayout.setVerticalGroup(
            pecasPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(pecasP);
        pecasP.setBounds(600, 0, 290, 50);

        pecasB.setBackground(java.awt.Color.white);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel3.setText("Peças capturadas:");

        javax.swing.GroupLayout pecasBLayout = new javax.swing.GroupLayout(pecasB);
        pecasB.setLayout(pecasBLayout);
        pecasBLayout.setHorizontalGroup(
            pecasBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pecasBLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );
        pecasBLayout.setVerticalGroup(
            pecasBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(pecasB);
        pecasB.setBounds(600, 333, 290, 40);

        text.setBorder(null);
        text.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        text.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        info.setEditable(false);
        info.setBackground(new java.awt.Color(242, 242, 242));
        info.setBorder(null);
        info.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        text.setViewportView(info);

        getContentPane().add(text);
        text.setBounds(600, 265, 290, 70);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmXadrez.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmXadrez.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmXadrez.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmXadrez.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmXadrez().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JPanel brancas;
    private static javax.swing.JTextPane info;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel pecasB;
    private javax.swing.JPanel pecasP;
    private javax.swing.JPanel pretas;
    private javax.swing.JPanel tab;
    private static javax.swing.JScrollPane text;
    // End of variables declaration//GEN-END:variables

    private void iniciarTab() {
        tab.setSize(600, 600);
        tab.setLayout(new GridLayout(8, 8));
        pos = new JButton[8][8];

        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                JButton button = new JButton();
                button.setPreferredSize(new Dimension(40, 40));
                if ((i + j) % 2 == 0) {
                    button.setBackground(Color.WHITE);
                } else {
                    button.setBackground(Color.GRAY);
                }

                if (partida.getPecas()[i][j] != null) {
                    button.setIcon(partida.getPecas()[i][j].toImageIcon());
                }
                button.setName("pos-" + i + "-" + j);

                button.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        JButton clickedButton = (JButton) e.getSource();
                        String pos = clickedButton.getName();

                        String[] posi = pos.split("-");

                        int l = Integer.parseInt(posi[1]);
                        int c = Integer.parseInt(posi[2]);

                        jogo(l, c);
                    }
                });
                pos[i][j] = button;
                tab.add(button);
            }
        }
        add(tab);
    }

    private void iniciarPecasCap() {
        pretas.setSize(290, 225);
        pretas.setLayout(new GridLayout(5, 4));
        capP = new JLabel[5][4];

        brancas.setSize(290, 225);
        brancas.setLayout(new GridLayout(5, 4));
        capB = new JLabel[5][4];

        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 4; j++) {
                JLabel icon = new JLabel();
                icon.setPreferredSize(new Dimension(50, 56));

                capP[i][j] = icon;
                pretas.add(icon);
            }
        }

        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 4; j++) {
                JLabel icon = new JLabel();
                icon.setPreferredSize(new Dimension(50, 56));

                capB[i][j] = icon;
                brancas.add(icon);
            }
        }
        add(pretas);
        add(brancas);
    }

    private static void verificarPeca(int linha, int coluna) {
        if (partida.getPecas()[linha][coluna] != null) {
            if (partida.getPecas()[linha][coluna].getCor() == partida.getJogadorVez()) {

                origem = null;

                vAOrigem(linha, coluna);
            } else {
                vADestino(linha, coluna);
            }
        } else {
            vADestino(linha, coluna);
        }
    }

    private static void vAOrigem(int linha, int coluna) {
        if (partida.validarAtribuicaoOrigem(new Posicao(linha, coluna))) {
            origem = new Posicao(linha, coluna);
            imprimirTabuleiro();
            imprimirMovimentosPossiveis(origem.getLinha(), origem.getColuna());
        }
    }

    private static void vADestino(int linha, int coluna) {

        if (partida.validarAtribuicaoDestino(origem, new Posicao(linha, coluna))) {
            destino = new Posicao(linha, coluna);
            PecasXadrez aux = partida.movimentarPeca(origem, destino);

            if (aux != null) {
                pecasCap.add(aux);
                imprimirPecasCapturadas();
            }

            origem = null;
            destino = null;

            imprimirTabuleiro();
        }

        if (partida.getPromocao() != null) {
            promo.setVisible(true);
        }
    }

    private static void jogo(int linha, int coluna) {
        try {
            if (origem == null) {
                vAOrigem(linha, coluna);
            } else if (destino == null) {
                verificarPeca(linha, coluna);
            }
        } catch (Exception e) {
            origem = null;
            destino = null;

            info.setText(e.getMessage());
            info.setBackground(Color.red);
        }
    }

    protected static void promover(String pecaPromo) {
        while (!pecaPromo.equals("B") && !pecaPromo.equals("C") && !pecaPromo.equals("D") && !pecaPromo.equals("T")) {
            promo.setVisible(true);
        }

        partida.trocarPecaPromovida(pecaPromo);
        imprimirTabuleiro();
    }

    private static void imprimirTabuleiro() {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if ((i + j) % 2 == 0) {
                    pos[i][j].setBackground(Color.WHITE);
                } else {
                    pos[i][j].setBackground(Color.GRAY);
                }

                if (partida.getPecas()[i][j] != null) {
                    if (partida.getJogadorVez() != partida.getPecas()[i][j].getCor()) {
                        pos[i][j].setEnabled(false);
                    } else {
                        pos[i][j].setEnabled(true);
                    }
                    pos[i][j].setIcon(partida.getPecas()[i][j].toImageIcon());
                } else {
                    pos[i][j].setIcon(null);
                    pos[i][j].setEnabled(false);
                }
            }
        }
        if (partida.getJogadorVez() == Cores.BRANCAS) {
            info.setText("Vez das peças Brancas");
        } else {
            info.setText("Vez das peças Pretas");
        }
        info.setBackground(new Color(230, 230, 230));
    }

    private static void imprimirMovimentosPossiveis(int linha, int coluna) {
        boolean[][] b = partida.movimentosPossiveisImprimir(new Posicao(linha, coluna));
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (b[i][j]) {
                    if (partida.getJogadorVez() == Cores.BRANCAS) {
                        pos[i][j].setBackground(new Color(175, 238, 238));
                    } else {
                        pos[i][j].setBackground(new Color(144, 238, 144));

                    }
                    pos[i][j].setEnabled(true);
                }
                if (partida.getPecas()[i][j] != null) {
                    pos[i][j].setIcon(partida.getPecas()[i][j].toImageIcon());
                    if (partida.getPecas()[i][j].getCor() == partida.getJogadorVez()) {
                        pos[i][j].setEnabled(true);
                    }
                }
            }
        }
    }

    private static void imprimirPecasCapturadas() {

        if (!pecasCap.isEmpty()) {
            List<PecasXadrez> pecasBrancas = pecasCap.stream().filter(x -> x.getCor() == Cores.BRANCAS).collect(Collectors.toList());
            List<PecasXadrez> pecasPretas = pecasCap.stream().filter(x -> x.getCor() == Cores.PRETAS).collect(Collectors.toList());

            if (!pecasBrancas.isEmpty()) {
                List<ImageIcon> pecasIcon = pecasBrancas.stream().map(x -> new ImageIcon(x.toImageIcon().getImage().getScaledInstance(45, 45, 1))).collect(Collectors.toList());

                int pos = 0;

                for (int i = 0; i < 5; i++) {
                    for (int j = 0; j < 4; j++) {
                        if (pos < pecasIcon.size()) {
                            capB[i][j].setIcon(pecasIcon.get(pos));
                            pos++;
                        }
                    }
                }
            }
            if (!pecasPretas.isEmpty()) {
                List<ImageIcon> pecasIcon = pecasPretas.stream().map(x -> new ImageIcon(x.toImageIcon().getImage().getScaledInstance(45, 45, 1))).collect(Collectors.toList());

                int pos = 0;

                for (int i = 0; i < 5; i++) {
                    for (int j = 0; j < 4; j++) {
                        if (pos < pecasIcon.size()) {
                            capP[i][j].setIcon(pecasIcon.get(pos));
                            pos++;
                        }
                    }
                }
            }
        }
    }

}
